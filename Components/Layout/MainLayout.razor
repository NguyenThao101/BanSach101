@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject NavigationManager navigationManager

@inject HttpClient Http
@inject IHttpClientFactory ClientFactory

@using Microsoft.CognitiveServices.Speech;
@using Microsoft.CognitiveServices.Speech.Audio;
@using Microsoft.CognitiveServices.Speech.Translation;


<style>

    .container-search {
        display: flex;
        flex: 1 1 auto;
        position: relative;
    }

    .search-results {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background-color: white;      
        z-index: 999;
        max-height: 200px;
        overflow-y: auto;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

    .mud-list-item {
        padding: 8px;
        cursor: pointer;
    }

        .mud-list-item:hover {
            background-color: #f4f4f4;
        }

    .outlined-text-field .mud-input {
        border-radius: 10px; /* Bo góc viền */
        border: 2px solid #ccc; /* Màu viền */
        padding: 0 16px; /* Cách lề bên trong */
        transition: border-color 0.3s ease, box-shadow 0.3s ease; /* Hiệu ứng mượt */
        background-color: #ffffff; /* Màu nền */
    }

        .outlined-text-field .mud-input:hover {
            border-color: #9e9e9e; /* Màu viền khi hover */
        }

        .outlined-text-field .mud-input:focus-within {
            border-color: #6200ea; /* Màu viền khi focus */
            box-shadow: 0 0 8px rgba(98, 0, 234, 0.5); /* Hiệu ứng shadow */
        }

    .outlined-text-field .mud-input-underline {
        display: none; /* Ẩn thanh underline bên dưới */
    }

    #speech-popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 20px 30px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        font-size: 16px;
        z-index: 1000;
        transition: opacity 0.3s ease, transform 0.3s ease;
        opacity: 0;
    }

        #speech-popup[style*="block"] {
            opacity: 1;
        }

</style>
<CascadingAuthenticationState>
    <MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" @rendermode="InteractiveServer" />
    <MudPopoverProvider @rendermode="InteractiveServer" />
    <MudDialogProvider @rendermode="InteractiveServer" />
    <MudSnackbarProvider @rendermode="InteractiveServer" />
    <MudLayout>
        <!-- Thanh AppBar của MainLayout -->
        <MudAppBar Elevation="1">
            <AuthorizeView>
                <Authorized>
                    @if (userRoleId != "2")
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                    }
                </Authorized>

            </AuthorizeView>
            
            <MudText Typo="Typo.h5" Class="ml-3">
                <a href="/" style="text-decoration: none; color:white ;">🏠 Nhà Sách</a>
            </MudText>
            
            <MudSpacer />
            <!-- Bắt đầu phần AppBar từ Home.razor -->
            @*   <MudTextField T="string" Icon="@Icons.Material.Filled.Search" Placeholder="Tìm kiếm..."
            Style=" margin: 0 10px;" /> *@
            @if (IsHomePage)
            {


                <div id="speech-popup" class="popup" style="display: @(IsListening ? "block" : "none");">
                    <p>Đang nhận diện giọng nói...</p>
                </div>

                <div class="container-search" style="display: flex; align-items: center;">
                    <MudTextField T="string"
                                  Icon="@Icons.Material.Filled.Search"
                                  Placeholder="Tìm kiếm..."
                                  Text="@searchQuery"
                                  TextChanged="this.SetValueAsync"
                                  Style="margin: 0 5px; height: 35px; font-size: 14px; color: #000000;"
                                  Immediate="true"
                                  Class="outlined-text-field"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Clear"
                                  AdornmentColor="Color.Secondary"
                                  Dense="true"
                                  OnFocus="OnFocus"
                                  OnAdornmentClick="ClearText" />

                    @if (!string.IsNullOrWhiteSpace(searchQuery) && FilteredProducts.Any())
                    {
                        <div class="search-results">
                            <MudList T="Product">
                                @foreach (var product in FilteredProducts)
                                {
                                    <MudListItem T="Product">
                                        <MudNavLink OnClick="() => NavigateToDetail(product.ProductId)" Style="color:#1e1e2d">
                                            @product.ProductName
                                        </MudNavLink>
                                    </MudListItem>
                                }
                            </MudList>
                        </div>
                    }
                    @if (!string.IsNullOrWhiteSpace(searchQuery))
                    {
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Search"
                                   OnClick="NavigateToSearchPage"
                                   Style="padding: 4px 10px; font-size: 12px; border-radius: 8px; font-weight: bold;"
                                   Elevation="2">
                            Tìm kiếm
                        </MudButton>

                    }

                    <MudIconButton Icon="@Icons.Material.Filled.Mic"
                                   Color="Color.Primary"
                                   Style="border-radius: 50%; margin-left: 10px;"
                                   OnClick="Click_Read" />
                </div>

            }

            <MudSpacer />
            <AuthorizeView>
                <Authorized Context="authContext">
                    <h3>Xin chào <i>@authContext.User.Identity.Name </i>.</h3>
                </Authorized>
            </AuthorizeView>
            @*  <MudText Class="ml-4">
                <MudLink Href="/qna" Class="mud-link">Hỏi Đáp</MudLink>
            </MudText> *@
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" style="color:white" Href="/cart" />
            <AuthorizeView>
                <Authorized>
                    <MudMenu Icon="@Icons.Material.Filled.AccountCircle" style="color:white"
                             AriaLabel="Open user menu">

                        <MudMenuItem @onclick="NavigateToProfile">Hồ sơ</MudMenuItem>
                        <MudMenuItem @onclick="NavigateToDonhang">Đơn hàng</MudMenuItem>
                        <MudMenuItem @onclick="Logout">Đăng xuất</MudMenuItem>
                    </MudMenu>
                </Authorized>
                <NotAuthorized>
                    <MudMenu Icon="@Icons.Material.Filled.AccountCircle"
                             AriaLabel="Open user menu">
                        <MudMenuItem @onclick="() => NavigateToLogin()">Đăng nhập</MudMenuItem>
                        <MudMenuItem @onclick="() => NavigateToRegister()">Đăng kí</MudMenuItem>

                    </MudMenu>
                </NotAuthorized>
            </AuthorizeView>
            <!-- Nút chuyển đổi chế độ sáng/tối -->
            <MudIconButton Icon="@DarkLightModeButtonIcon" Color="Color.Inherit" OnClick="@DarkModeToggle" />

        </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
</CascadingAuthenticationState>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

@code {

    private bool IsListening { get; set; } = false;


    // static string? InputValue { get; set; }
    private void ClearText()
    {
        searchQuery = string.Empty;  // Xóa nội dung
    }

    async Task Click_Read()
    {
        try
        {
            IsListening = true;
            StateHasChanged();

            var speechConfig = SpeechConfig.FromSubscription("70Q0JqC1cKSCO1LW8xzsqfbLxX2doACmzJsWuBKEPUvEAhXyMSo2JQQJ99BAAC3pKaRXJ3w3AAAYACOGpXYT", "eastasia");
            speechConfig.SpeechRecognitionLanguage = "vi-VN";

            using var audioConfig = AudioConfig.FromDefaultMicrophoneInput();
            using var speechRecognizer = new SpeechRecognizer(speechConfig, audioConfig);
            var speechRecognitionResult = await speechRecognizer.RecognizeOnceAsync();
            OutSpeechRecognitionoResult(speechRecognitionResult);
        }
        finally
        {
            IsListening = false;
            StateHasChanged();
        }
    }

    void OutSpeechRecognitionoResult(SpeechRecognitionResult speechRecognitionResult)
    {
        switch (speechRecognitionResult.Reason)
        {
            case ResultReason.RecognizedSpeech:
                searchQuery = speechRecognitionResult.Text.TrimEnd('.', ',', ';', ':', '!', '?');
                IsListening = false; // Tắt trạng thái "Đang nghe"
                StateHasChanged();

                // voice Search ....
                NavigateToSearchPage();
                break;
            case ResultReason.NoMatch:
                searchQuery = "Xin vui lòng thử lại!!!";
                break;
            case ResultReason.Canceled:
                var cancellation = CancellationDetails.FromResult(speechRecognitionResult);
                searchQuery = "Cannnnnn: Lí do=" + cancellation.Reason;
                if (cancellation.Reason == CancellationReason.Error)
                {
                    Console.WriteLine($"CANCELED: ErrorCode={cancellation.ErrorCode}");
                    Console.WriteLine($"CANCELED: ErrorDetails ={cancellation.ErrorDetails}");
                    Console.WriteLine($"CANCELED: check lại key và region");
                }
                break;
        }
        //searchQuery = InputValue;
    }

    private bool IsHomePage => NavigationManager.ToBaseRelativePath(NavigationManager.Uri) == "";


    private bool _drawerOpen = false;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private string? _value;
    private string? _result;
    private string userRoleId;

    private void NavigateToSearchPage()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            NavigationManager.NavigateTo($"/SearchProduct?query={searchQuery}");
        }
    }
    private void NavigateToLogin()
    {
        var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.NavigateTo($"login?returnUrl={returnUrl}");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
    private void NavigateTohome()
    {
        NavigationManager.NavigateTo("/");
    }
    private void NavigateToProfile()
    {

        navigationManager.NavigateTo("/profile");
    }
    private void NavigateToDonhang()
    {

        navigationManager.NavigateTo("/donhang");
    }
    private async Task SetValueAsync(string value)
    {
        searchQuery = value;
        await SearchProductsAsync();

    }

    private async Task AfterSetValueAsync()
    {
        await Task.Yield();
        _result = $"Set at {DateTime.Now.ToLongTimeString()}";
    }

    private List<Product> FilteredProducts = new List<Product>();
    private string _searchQuery = string.Empty;
    private string searchQuery
    {
        get => _searchQuery;
        set
        {
            if (_searchQuery != value)
            {
                _searchQuery = value;
                OnSearchQueryChanged().ConfigureAwait(false);
            }
        }
    }

    private async Task OnSearchQueryChanged() => await SearchProductsAsync();

    private async Task SearchProductsAsync()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var httpClient = ClientFactory.CreateClient("API");

            var result = await httpClient.GetFromJsonAsync<List<Product>>($"api/search/search-product?searchQuery={searchQuery}");

            FilteredProducts = result;
        }
        else
        {
            FilteredProducts.Clear();
        }
    }
    private void NavigateToDetail(int productId)
    {
        searchQuery = string.Empty;
        FilteredProducts.Clear();
        NavigationManager.NavigateTo($"/Detail/{productId}");
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Xử lý hoàn thành prerendering và khởi tạo trạng thái xác thực
            ((CustomAuthStateProvider)AuthenticationStateProvider).NotifyPrerenderCompleted();
            ((CustomAuthStateProvider)AuthenticationStateProvider).InitializeAuthenticationStateAsync();

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Trích xuất RoleId từ Claims
            userRoleId =  user.Claims.FirstOrDefault(c => c.Type == "RoleId")?.Value;

            // Debug thông tin RoleId
            if (!string.IsNullOrEmpty(userRoleId))
            {
                Console.WriteLine($"RoleId: {userRoleId}");
            }

            StateHasChanged(); // Cập nhật giao diện

        }
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#ffffff",
            AppbarBackground = "#e74c3c",
            DrawerBackground = "#e74c3c",
            DrawerText = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
            DrawerIcon = "#ffffff",
        };


    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#ffffff",
            AppbarBackground = "#1a1a27", // Bỏ rgba(26,26,39,0.8) và thay bằng màu tối
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#74718e80", // Thay thế màu trắng trong suốt (#9999994d)
            ActionDisabledBackground = "rgba(255, 255, 255, 0.8);", // Thay thế màu trắng trong suốt (#605f6d4d)
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "rgba(255, 255, 255, 0.8);", // Thay thế màu trắng trong suốt (#ffffff33)
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2dbf", // Giữ overlay nhưng giảm độ trong suốt (từ #1e1e2d80)
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        ((CustomAuthStateProvider)AuthenticationStateProvider).InitializeAuthenticationStateAsync();
        StateHasChanged();
        NavigationManager.NavigateTo("/login");
    }
}
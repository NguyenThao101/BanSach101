@page "/donhang"
@using BanSach.Components.IService
@using BanSach.Components.Model
@inject CustomAuthStateProvider AuthenticationStateProvider
@using BanSach.Components.Data
@inject AppDbContext _dbContext
@inject IDialogService DialogService
@inject IBillService BillService
@using System.Security.Claims
@using BanSach.Components.Model.ViewModel
@using MudBlazor
@using BanSach.Components.Services.ReviewService
@inject ReviewService ReviewService

<style>
    .img-product {
        max-width: 100px;
        width: 100%;
    }

    .fixed-layout {
        display: grid;
        grid-template-columns: 120px auto 100px 150px 150px;
        align-items: center;
        gap: 15px;
    }

    .text-right {
        text-align: right;
    }

    .status-container {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        height: 100%;
    }

    .status-pending {
        color: #e74c3c; /* Đỏ */
        font-weight: bold;
    }

    .status-completed {
        color: #27ae60; /* Xanh lá */
        font-weight: bold;
    }
</style>
<MudContainer MaxWidth="MaxWidth.Large" Class="pa-0">
@foreach (var groupedProducts in products.Where(p => p.Bills.UserID == userId).GroupBy(p => p.Bills.BillId))
{
    var bill = groupedProducts.First().Bills;

    <MudPaper Elevation="3" Style="margin:20px; padding:20px">
        <!-- Header -->
        <MudGrid Style="margin-bottom: 20px">
            <MudItem md="6" xs="6">
                <MudItem><strong>Mã hóa đơn: @groupedProducts.Key</strong></MudItem>
                <MudItem>Ngày mua: @bill.Created_at</MudItem>
            </MudItem>
            <MudSpacer />
            <MudItem md="6" xs="6" Style="color:#e74c3c; text-align:right">
                <strong class="@(bill.Status == "Hoàn thành" ? "status-completed" : "status-pending")">
                    @bill.Status
                </strong>
            </MudItem>
        </MudGrid>

        <!-- Product List -->
        @foreach (var context in groupedProducts)
        {
            <div class="fixed-layout" style="margin-bottom:10px">
                <!-- Ảnh sản phẩm -->
                <img src="@context.Product.Img" class="img-product" />

                <!-- Tên sản phẩm -->
                <div>@context.Product.ProductName</div>

                <!-- Số lượng -->
                <div>@context.Quantity</div>

                <!-- Giá -->
                <div class="text-right">
                    @context.Price.ToString("C0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))
                </div>

                <!-- Nút hành động -->
                <div class="text-right">
                    @if (bill.Status == "Hoàn thành")
                    {
                        <MudButton Color="Color.Primary"
                                   Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   @onclick="() => OpenReviewDialog(bill.Status, context.ProductBillId, context.Product.ProductId)">
                            Đánh giá
                        </MudButton>
                    }
                </div>
            </div>
        }

        <!-- Footer -->
        <MudGrid Style="margin-top: 20px;">
            <MudItem md="6" xs="6">
                Ngày giao: @bill.Updated_at
            </MudItem>
            <MudSpacer />
            <MudItem md="6" xs="6" Style="color:#e74c3c; text-align:right">
                <strong>Tổng tiền: @bill.TotalPrice</strong>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

</MudContainer>

@code {
    private int userId;
    private List<ProductBillDetailDto> products = new List<ProductBillDetailDto>();
    private int rating = 0;
    private string reviewText = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (int.TryParse(userIdClaim, out var parsedUserId))
        {
            userId = parsedUserId;
        }
        else
        {
            userId = 0;
        }

        products = await BillService.GetProductsByBill();
    }

    private async Task OpenReviewDialog(string status, int productBillId, int productId)
    {
        if (status == "Hoàn thành")
        {
            // Kiểm tra xem người dùng đã đánh giá sản phẩm này chưa
            bool hasReviewed = await ReviewService.HasReviewedOrderAsync(userId, productBillId);
            if (hasReviewed)
            {
                await DialogService.ShowMessageBox("Thông báo", "Bạn đã đánh giá sản phẩm này rồi.");
                return;
            }

            // Hiển thị dialog nếu chưa đánh giá
            var parameters = new DialogParameters
                {
                    ["Rating"] = rating,
                    ["ReviewText"] = reviewText,
                    ["ProductBillId"] = productBillId,
                    ["ProductId"] = productId
                };

            var dialog = DialogService.Show<RatingDialog>("Đánh giá sản phẩm", parameters);
            var result = await dialog.Result;


        }
    }
}

@page "/SearchProduct"
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@using System.Globalization

<MudContainer>
    <MudText Typo="Typo.h4" Style="margin-bottom: 20px;">
        Kết quả tìm kiếm cho: <b>@((MarkupString)searchQuery)</b>
    </MudText>

    <MudList T="Product" Class="mud-elevation-2">
        @if (FilteredResult.Any())
        {
            @foreach (var product in FilteredResult)
            {
                <MudListItem OnClick="() => NavigateToDetail(product.ProductId)" Class="product-item" Style="display: flex; align-items: center; padding: 10px;">
      
                    <div Style="flex-grow: 1;">

                        <MudText Typo="Typo.subtitle1" Class="product-name">@product.ProductName</MudText>
                        <img src="@product.Img" alt="Product Image" Width="180" Height="200" Class="rounded-lg" />
                        <MudText Typo="Typo.body2" Color="Color.Secondary">📖 Tác giả: <b>@product.Author</b></MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">🏢 Nhà xuất bản: <b>@product.Publisher</b></MudText>
                        <MudText Typo="Typo.body2" Color="Color.Tertiary">💰 Giá: <b>@string.Format(new CultureInfo("vi-VN"), "{0:N0}", product.SellPrice) vnđ</b>
                        </MudText>
                    </div>            
                </MudListItem>
                <MudDivider />
            }
        }
        else
        {
            <MudText Class="no-result" Style="padding: 10px; text-align: center;">
                ❌ Không tìm thấy sản phẩm nào.
            </MudText>
        }
    </MudList>

    
    @if (AdditionalResult.Any())
    {
        <MudText Typo="Typo.h5" Style="margin-top: 30px;">
            🔍 Sản phẩm liên quan:
        </MudText>

        <MudList T="Product" Class="mud-elevation-2">
            @foreach (var product in AdditionalResult)
            {
                <MudListItem OnClick="() => NavigateToDetail(product.ProductId)" Class="product-item" Style="display: flex; align-items: center; padding: 10px;">
                    <MudAvatar Size="Size.Large" Image="@product.Img" Alt="Ảnh sản phẩm"
                               Class="product-image" Style="margin-right: 10px;" />

                    <div Style="flex-grow: 1;">
                        <MudText Typo="Typo.subtitle1" Class="product-name">
                            <MudNavLink Style="text-decoration: none; color: inherit;">
                                @product.ProductName
                            </MudNavLink>
                        </MudText>

                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            📖 Tác giả: <b>@product.Author</b>
                        </MudText>

                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            🏢 Nhà xuất bản: <b>@product.Publisher</b>
                        </MudText>

                        <MudText Typo="Typo.body2" Color="Color.Tertiary">💰 Giá: <b>@string.Format(new CultureInfo("vi-VN"), "{0:N0}", product.SellPrice) vnđ</b> </MudText>
                    </div>
                </MudListItem>
                <MudDivider />
            }
        </MudList>
    }
</MudContainer>

@code {
    private List<Product> FilteredResult = new();
    private List<Product> AdditionalResult = new();
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Lấy từ khóa tìm kiếm từ query string
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        searchQuery = queryParams["query"] ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            await PerformSearchAsync();
        }
    }

    private async Task PerformSearchAsync()
    {
        var httpClient = ClientFactory.CreateClient("API");

        
        var result = await httpClient.GetFromJsonAsync<List<Product>>(
            $"api/search/search-product?searchQuery={searchQuery}") ?? new();
        

        if (!result.Any())
        {
            
            FilteredResult = new();
            AdditionalResult = new();
            return;
        }

        
        FilteredResult = result
            .Where(p => p.ProductName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (FilteredResult.Any())
        {
           
            var firstProduct = FilteredResult.First();
            AdditionalResult = result
                .Where(p => p.Author == firstProduct.Author && !FilteredResult.Contains(p))
                .ToList();
            return;
        }

     
        FilteredResult = result
            .Where(p => p.Author.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (FilteredResult.Any())
        {
          
            AdditionalResult = new();
            return;
        }

        
        FilteredResult = result
            .Where(p => p.Publisher.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (FilteredResult.Any())
        {
          
            AdditionalResult = new();
            return;
        }


        FilteredResult = new();
        AdditionalResult = new();
    }

    private void NavigateToDetail(int productId)
    {
        NavigationManager.NavigateTo($"/Detail/{productId}");
    }
}


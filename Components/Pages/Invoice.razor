@page "/invoice/{productBillId:int}"
@using BanSach.Components.Model
@using BanSach.Components.IService
@inject ICartService CartService
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject IBillService BillService
@using BanSach.Components.Model.ViewModel;

@using System.Globalization
<MudGrid Class="pt-4">
     <MudItem xs="1" sm="1"></MudItem>
    <MudItem xs="10" sm="10">
        @if (listProductUserBill != null)
        {
            <MudGrid>
                <MudItem xs="12" sm="12" md="12">
                    <!-- Thông tin hóa đơn -->
                    <div style="font-weight: bold; font-size: 1.5em; margin-bottom: 10px;">Hóa Đơn</div>
                    <div><strong>ID Hóa Đơn:</strong> @listProductUserBill.First().Bills.BillId</div>
                    <div><strong>Tổng Tiền:</strong> @string.Format(new CultureInfo("vi-VN"), "{0:N0}", listProductUserBill.First().Bills.TotalPrice) vnđ</div>
                    <div><strong>Số Lượng:</strong> @listProductUserBill.Sum(x => x.Quantity)</div>
                    <div><strong>Ngày Tạo:</strong> @(listProductUserBill.First().Bills.Created_at?.ToString("HH:mm dd/MM/yyyy") ?? "Không có thông tin")</div>

                    <MudDivider Class="my-3" />
                    <MudText Typo="Typo.h6" Class="mud-width-full">Thông tin giao hàng</MudText>
                    <MudGrid>
                        <MudItem md="6" xs="12" sm="6">
                            <!-- Thông tin giao hàng -->

                            <MudTextField Margin="Margin.Dense" Label="Tên người nhận" @bind-Value="receiverName" Variant="Variant.Outlined" Required="true" FullWidth="true" Class="mt-2" />
                            <MudTextField Margin="Margin.Dense" Label="Số điện thoại" @bind-Value="phoneNumber" Variant="Variant.Outlined" Required="true" FullWidth="true" Class="mt-2" />

                            <MudSelect Margin="Margin.Dense" T="string" Label="Chọn thành phố" @bind-Value="selectedCity" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Clearable FullWidth="true" Class="mt-2">
                                @foreach (var city in cities)
                                {
                                    <MudSelectItem Value="@city.Name">@city.Name</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect Margin="Margin.Dense" T="string" Label="Chọn quận/huyện" @bind-Value="selectedDistrict" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Clearable FullWidth="true" Class="mt-2">
                                @if (!string.IsNullOrEmpty(selectedCity))
                                {
                                    var selectedCityObj = cities.FirstOrDefault(c => c.Name == selectedCity);
                                    if (selectedCityObj != null)
                                    {
                                        foreach (var district in selectedCityObj.Districts)
                                        {
                                            <MudSelectItem Value="@district">@district</MudSelectItem>
                                        }
                                    }
                                }
                            </MudSelect>

                            <MudTextField Margin="Margin.Dense" Label="Địa chỉ chi tiết" @bind-Value="receiverAddress" Variant="Variant.Outlined" Required="true" FullWidth="true" Class="mt-2" />

                            <MudDivider Class="my-3" />

                            <!-- Phương thức thanh toán -->
                            <MudSelect T="Pay" @bind-Value="pay" ToStringFunc="@converter" Label="Chọn phương thức thanh toán" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable FullWidth="true" Class="mt-2">
                                <MudSelectItem Value="@(new Pay() { Name="Tiền mặt"})" />
                                <MudSelectItem Value="@(new Pay() { Name="Thanh toán online"})" />
                            </MudSelect>
                        </MudItem>
                        <MudItem md="6" xs="12" sm="6">
                            <!-- Bảng sản phẩm -->
                            <MudTable Items="listProductUserBill" Hover="true" Dense="true" Class="mt-3">
                                <HeaderContent>
                                    <MudTh>Tên sản phẩm</MudTh>
                                    <MudTh>Số lượng</MudTh>
                                    <MudTh>Giá sản phẩm</MudTh>
                                    <MudTh>Tác vụ</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Product.ProductName</MudTd>
                                    <MudTd>@context.Quantity</MudTd>
                                    <MudTd>
                                        @Convert.ToDecimal(context.Price).ToString("#,##0") vnđ
                                    </MudTd>
                                    <MudTd>
                                        <MudButton Color="Color.Error" OnClick="@(() => DeleteProduct(context))">Xóa</MudButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>

                            <MudDivider Class="my-3" />
                        </MudItem>
                    </MudGrid>
                    <MudDivider Class="my-3" />

                    <!-- Nút đặt hàng và hủy đơn -->
                    <!-- Nút đặt hàng -->
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="PlaceOrder">
                        Đặt hàng
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeleteOrder">
                        Hủy đơn
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudText Typo="Typo.h6" Class="mud-width-full">Chưa có thông tin hóa đơn.</MudText>
        }
    </MudItem>
</MudGrid>


@code {
    [Parameter] public int productBillId { get; set; }
    private Product_bill productBill;
    private Bill billUser;
    private List<ProductBillDetailDto> listProductUserBill;
    private ProductBillDetailDto productBillDetailDto = new ProductBillDetailDto();
    private ShippingInfoDTO shippingInfoDTO = new ShippingInfoDTO();

    // Biến lưu thông tin giao hàng
    private string? receiverName; // Tên người nhận
    private string? phoneNumber;  // Số điện thoại
    private string? selectedCity; // Thành phố
    private string? selectedDistrict; // Quận/Huyện
    private string? receiverAddress;
    private Pay pay = new Pay { Name = "Tiền mặt" };  // Mặc định là Tiền mặt

    // Danh sách thành phố và quận/huyện
    private List<City> cities = new List<City>
    {
        new City { Name = "Hà Nội", Districts = new List<string> { "Ba Đình", "Hoàn Kiếm", "Tây Hồ" } },
        new City { Name = "Hồ Chí Minh", Districts = new List<string> { "Quận 1", "Quận 2", "Quận 3" } }
    };

    // Hàm converter cho MudSelect
    Func<Pay, string> converter = p => p?.Name;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            listProductUserBill = await BillService.GetProductsByBillId(productBillId);
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Lỗi", $"Không thể tải hóa đơn: {ex.Message}");
        }
    }

    private async Task PlaceOrder()
    {
        // Kiểm tra thông tin giao hàng
        if (string.IsNullOrEmpty(receiverName) || string.IsNullOrEmpty(phoneNumber) || string.IsNullOrEmpty(receiverAddress) ||
            string.IsNullOrEmpty(selectedCity) || string.IsNullOrEmpty(selectedDistrict))
        {
            await DialogService.ShowMessageBox("Lỗi", "Vui lòng điền đầy đủ thông tin giao hàng.");
            return;
        }

        // Kiểm tra phương thức thanh toán
        if (pay == null || string.IsNullOrEmpty(pay.Name))
        {
            await DialogService.ShowMessageBox("Lỗi", "Vui lòng chọn phương thức thanh toán.");
            return;
        }

        try
        {
            shippingInfoDTO.ReceiverName = receiverName;
            shippingInfoDTO.PhoneNumber = phoneNumber;
            shippingInfoDTO.SelectedCity = selectedCity;
            shippingInfoDTO.SelectedDistrict = selectedDistrict;
            shippingInfoDTO.ReceiveAddress = receiverAddress;
            shippingInfoDTO.UserID = listProductUserBill.First().Bills.UserID;


            var (paymentResult, code, message) = await BillService.ConfirmOrder(listProductUserBill.First().Bills, pay.Name, shippingInfoDTO);
            if (code == 400)
            {
                await DialogService.ShowMessageBox("Lỗi", $"{message}");
                return;
            }
            else if (code == 202)
            {
                navigationManager.NavigateTo($"{message}");

            }
            else
            {
                await DialogService.ShowMessageBox("Thành công", $"{message}");
                navigationManager.NavigateTo("/?message=" + Uri.EscapeDataString("Đơn hàng đã được đặt thành công."));
            }

        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Lỗi", $"Đã xảy ra lỗi: {ex.Message}");
        }
    }
    private async void DeleteProduct(ProductBillDetailDto product)
    {
        try
        {
            // Lấy thông tin hóa đơn từ product
            var bill = product.Bills;

            // Xóa sản phẩm cụ thể trong hóa đơn
            await BillService.DeleteProductFromBill(bill.BillId, product.Product.ProductId);

            bill.TotalPrice -= product.Price * product.Quantity;

            await BillService.EditBill(bill); 

            listProductUserBill.Remove(product);
            StateHasChanged();

            await DialogService.ShowMessageBox("Thành công", "Sản phẩm đã được xóa khỏi đơn hàng.");
        }
        catch (Exception ex)
        {
            // Xử lý lỗi
            await DialogService.ShowMessageBox("Lỗi", $"Đã xảy ra lỗi khi xóa sản phẩm: {ex.Message}");
        }
    }

    private async void DeleteOrder()
    {
        try
        {

            if (productBillId <= 0)
            {
                await DialogService.ShowMessageBox("Lỗi", "ID hóa đơn không hợp lệ.");
                return;
            }
            var bill = await BillService.GetBillById(productBillId);
            // Kiểm tra nếu danh sách sản phẩm trong hóa đơn trống
            if (listProductUserBill == null || !listProductUserBill.Any())
            {
                await DialogService.ShowMessageBox("Lỗi", "Hóa đơn không có sản phẩm để xóa.");
                return;
            }
            await BillService.DeleteAllProductsFromBill(productBillId);
            bill.TotalPrice = 0;
            await BillService.EditBill(bill);
            await DialogService.ShowMessageBox("Thành công", "Đơn hàng đã được hủy.");
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            // Xử lý lỗi nếu có
            await DialogService.ShowMessageBox("Lỗi", $"Đã xảy ra lỗi khi xóa đơn hàng: {ex.Message}");
        }
    }

    // Lớp để lưu thông tin thành phố và quận/huyện
    private class City
    {
        public string? Name { get; set; }
        public List<string> Districts { get; set; }
    }

    // Lớp để lưu thông tin phương thức thanh toán
    public class Pay
    {
        public string? Name { get; set; }

        public override bool Equals(object o)
        {
            var other = o as Pay;
            return other?.Name == Name;
        }

        public override int GetHashCode() => Name.GetHashCode();
    }
}
